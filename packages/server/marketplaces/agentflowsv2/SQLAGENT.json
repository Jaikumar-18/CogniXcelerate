{
    "nodes": [
        {
            "id": "startAgentflow_0",
            "type": "agentFlow",
            "position": {
                "x": -1108.9460648756026,
                "y": -39.18635653698418
            },
            "data": {
                "id": "startAgentflow_0",
                "label": "Start",
                "version": 1.1,
                "name": "startAgentflow",
                "type": "Start",
                "color": "#7EE787",
                "hideInput": true,
                "baseClasses": ["Start"],
                "category": "Agent Flows",
                "description": "Starting point of the agentflow",
                "inputParams": [
                    {
                        "label": "Input Type",
                        "name": "startInputType",
                        "type": "options",
                        "options": [
                            {
                                "label": "Chat Input",
                                "name": "chatInput",
                                "description": "Start the conversation with chat input"
                            },
                            {
                                "label": "Form Input",
                                "name": "formInput",
                                "description": "Start the workflow with form inputs"
                            }
                        ],
                        "default": "chatInput",
                        "id": "startAgentflow_0-input-startInputType-options",
                        "display": true
                    },
                    {
                        "label": "Form Title",
                        "name": "formTitle",
                        "type": "string",
                        "placeholder": "Please Fill Out The Form",
                        "show": {
                            "startInputType": "formInput"
                        },
                        "id": "startAgentflow_0-input-formTitle-string",
                        "display": false
                    },
                    {
                        "label": "Form Description",
                        "name": "formDescription",
                        "type": "string",
                        "placeholder": "Complete all fields below to continue",
                        "show": {
                            "startInputType": "formInput"
                        },
                        "id": "startAgentflow_0-input-formDescription-string",
                        "display": false
                    },
                    {
                        "label": "Form Input Types",
                        "name": "formInputTypes",
                        "description": "Specify the type of form input",
                        "type": "array",
                        "show": {
                            "startInputType": "formInput"
                        },
                        "array": [
                            {
                                "label": "Type",
                                "name": "type",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "String",
                                        "name": "string"
                                    },
                                    {
                                        "label": "Number",
                                        "name": "number"
                                    },
                                    {
                                        "label": "Boolean",
                                        "name": "boolean"
                                    },
                                    {
                                        "label": "Options",
                                        "name": "options"
                                    }
                                ],
                                "default": "string"
                            },
                            {
                                "label": "Label",
                                "name": "label",
                                "type": "string",
                                "placeholder": "Label for the input"
                            },
                            {
                                "label": "Variable Name",
                                "name": "name",
                                "type": "string",
                                "placeholder": "Variable name for the input (must be camel case)",
                                "description": "Variable name must be camel case. For example: firstName, lastName, etc."
                            },
                            {
                                "label": "Add Options",
                                "name": "addOptions",
                                "type": "array",
                                "show": {
                                    "formInputTypes[$index].type": "options"
                                },
                                "array": [
                                    {
                                        "label": "Option",
                                        "name": "option",
                                        "type": "string"
                                    }
                                ]
                            }
                        ],
                        "id": "startAgentflow_0-input-formInputTypes-array",
                        "display": false
                    },
                    {
                        "label": "Ephemeral Memory",
                        "name": "startEphemeralMemory",
                        "type": "boolean",
                        "description": "Start fresh for every execution without past chat history",
                        "optional": true,
                        "id": "startAgentflow_0-input-startEphemeralMemory-boolean",
                        "display": true
                    },
                    {
                        "label": "Flow State",
                        "name": "startState",
                        "description": "Runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "string",
                                "placeholder": "Foo"
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "placeholder": "Bar",
                                "optional": true
                            }
                        ],
                        "id": "startAgentflow_0-input-startState-array",
                        "display": true
                    },
                    {
                        "label": "Persist State",
                        "name": "startPersistState",
                        "type": "boolean",
                        "description": "Persist the state in the same session",
                        "optional": true,
                        "id": "startAgentflow_0-input-startPersistState-boolean",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "startInputType": "chatInput",
                    "formTitle": "",
                    "formDescription": "",
                    "formInputTypes": "",
                    "startEphemeralMemory": "",
                    "startState": [
                        {
                            "key": "sqlQuery",
                            "value": ""
                        },
                        {
                            "key": "selected_DB",
                            "value": ""
                        }
                    ],
                    "startPersistState": ""
                },
                "outputAnchors": [
                    {
                        "id": "startAgentflow_0-output-startAgentflow",
                        "label": "Start",
                        "name": "startAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "width": 105,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": -1108.9460648756026,
                "y": -39.18635653698418
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_0",
            "position": {
                "x": -349.7898560168238,
                "y": -231.21564372608282
            },
            "data": {
                "id": "customFunctionAgentflow_0",
                "label": "HR_DB",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_0-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_0-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_0-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": "",
                    "customFunctionJavascriptFunction": "const { DataSource } = require('typeorm');\n\n// --- Connection for Sales DB ---\n// (Keep your specific DB connection details here for each Custom Function)\nconst HOST = '10.10.20.156';\nconst USER = 'postgres';\nconst PASSWORD = 'password';\nconst DATABASE = 'my_hr_db';\nconst PORT = 5433;\n\nlet sqlSchemaPrompt = '';\n\nconst AppDataSource = new DataSource({\n    type: 'postgres',\n    host: HOST,\n    port: PORT,\n    username: USER,\n    password: PASSWORD,\n    database: DATABASE,\n    synchronize: false,\n    logging: false,\n});\n\nasync function getSQLPrompt() {\n    try {\n        console.log(`Attempting to connect to database: ${DATABASE} on ${HOST}:${PORT}`);\n        await AppDataSource.initialize();\n        console.log('Successfully connected to the database and initialized DataSource.');\n\n        const queryRunner = AppDataSource.createQueryRunner();\n\n        // Get all user-defined tables\n        const tablesResult = await queryRunner.query(`\n            SELECT table_name\n            FROM information_schema.tables\n            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'\n        `);\n        console.log(`Found ${tablesResult.length} tables in schema.`);\n\n        for (const tableRow of tablesResult) {\n            const tableName = tableRow.table_name;\n            // Corrected query to fetch column details including comments\n            const schemaInfo = await queryRunner.query(`\n                SELECT\n                    c.column_name,\n                    c.data_type,\n                    c.is_nullable,\n                    pg_catalog.col_description(\n                        (SELECT 'public.${tableName}'::regclass::oid),\n                        c.ordinal_position\n                    ) AS column_comment\n                FROM\n                    information_schema.columns AS c\n                WHERE\n                    c.table_schema = 'public' AND c.table_name = '${tableName}'\n                ORDER BY\n                    c.ordinal_position;\n            `);\n\n            const createColumns = [];\n            for (const column of schemaInfo) {\n                const name = column.column_name;\n                const type = column.data_type.toUpperCase();\n                const notNull = column.is_nullable === 'NO' ? 'NOT NULL' : '';\n                const comment = column.column_comment ? ` -- ${column.column_comment}` : '';\n                createColumns.push(`${name} ${type} ${notNull}${comment}`);\n            }\n\n            // Construct only the CREATE TABLE statement (schema)\n            sqlSchemaPrompt += `CREATE TABLE ${tableName} (\\n  ${createColumns.join(',\\n  ')}\\n);\\n\\n`;\n        }\n\n        await queryRunner.release();\n        await AppDataSource.destroy();\n        console.log('DataSource destroyed. Database operations complete.');\n\n    } catch (err) {\n        console.error('An error occurred during database schema retrieval:', err);\n        // Ensure that in case of an error, sqlSchemaPrompt is still set to something\n        // or re-throw the error so Flowise knows there was a failure.\n        sqlSchemaPrompt = `[ERROR FETCHING SCHEMA]: ${err.message || err}`;\n        throw err; // Re-throw to propagate the error in Flowise\n    }\n}\n\nawait getSQLPrompt();\nreturn sqlSchemaPrompt;",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_0-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 118,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": -349.7898560168238,
                "y": -231.21564372608282
            },
            "dragging": false
        },
        {
            "id": "llmAgentflow_0",
            "position": {
                "x": -180.39917955500056,
                "y": -234.14600159179815
            },
            "data": {
                "id": "llmAgentflow_0",
                "label": "Query Generator",
                "version": 1,
                "name": "llmAgentflow",
                "type": "LLM",
                "color": "#64B5F6",
                "baseClasses": ["LLM"],
                "category": "Agent Flows",
                "description": "Large language models to analyze user-provided inputs and generate responses",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "llmModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "llmAgentflow_0-input-llmModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Messages",
                        "name": "llmMessages",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Role",
                                "name": "role",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "System",
                                        "name": "system"
                                    },
                                    {
                                        "label": "Assistant",
                                        "name": "assistant"
                                    },
                                    {
                                        "label": "Developer",
                                        "name": "developer"
                                    },
                                    {
                                        "label": "User",
                                        "name": "user"
                                    }
                                ]
                            },
                            {
                                "label": "Content",
                                "name": "content",
                                "type": "string",
                                "acceptVariable": true,
                                "generateInstruction": true,
                                "rows": 4
                            }
                        ],
                        "id": "llmAgentflow_0-input-llmMessages-array",
                        "display": true
                    },
                    {
                        "label": "Enable Memory",
                        "name": "llmEnableMemory",
                        "type": "boolean",
                        "description": "Enable memory for the conversation thread",
                        "default": true,
                        "optional": true,
                        "id": "llmAgentflow_0-input-llmEnableMemory-boolean",
                        "display": true
                    },
                    {
                        "label": "Memory Type",
                        "name": "llmMemoryType",
                        "type": "options",
                        "options": [
                            {
                                "label": "All Messages",
                                "name": "allMessages",
                                "description": "Retrieve all messages from the conversation"
                            },
                            {
                                "label": "Window Size",
                                "name": "windowSize",
                                "description": "Uses a fixed window size to surface the last N messages"
                            },
                            {
                                "label": "Conversation Summary",
                                "name": "conversationSummary",
                                "description": "Summarizes the whole conversation"
                            },
                            {
                                "label": "Conversation Summary Buffer",
                                "name": "conversationSummaryBuffer",
                                "description": "Summarize conversations once token limit is reached. Default to 2000"
                            }
                        ],
                        "optional": true,
                        "default": "allMessages",
                        "show": {
                            "llmEnableMemory": true
                        },
                        "id": "llmAgentflow_0-input-llmMemoryType-options",
                        "display": true
                    },
                    {
                        "label": "Window Size",
                        "name": "llmMemoryWindowSize",
                        "type": "number",
                        "default": "20",
                        "description": "Uses a fixed window size to surface the last N messages",
                        "show": {
                            "llmMemoryType": "windowSize"
                        },
                        "id": "llmAgentflow_0-input-llmMemoryWindowSize-number",
                        "display": false
                    },
                    {
                        "label": "Max Token Limit",
                        "name": "llmMemoryMaxTokenLimit",
                        "type": "number",
                        "default": "2000",
                        "description": "Summarize conversations once token limit is reached. Default to 2000",
                        "show": {
                            "llmMemoryType": "conversationSummaryBuffer"
                        },
                        "id": "llmAgentflow_0-input-llmMemoryMaxTokenLimit-number",
                        "display": false
                    },
                    {
                        "label": "Input Message",
                        "name": "llmUserMessage",
                        "type": "string",
                        "description": "Add an input message as user message at the end of the conversation",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "show": {
                            "llmEnableMemory": true
                        },
                        "id": "llmAgentflow_0-input-llmUserMessage-string",
                        "display": true
                    },
                    {
                        "label": "Return Response As",
                        "name": "llmReturnResponseAs",
                        "type": "options",
                        "options": [
                            {
                                "label": "User Message",
                                "name": "userMessage"
                            },
                            {
                                "label": "Assistant Message",
                                "name": "assistantMessage"
                            }
                        ],
                        "default": "userMessage",
                        "id": "llmAgentflow_0-input-llmReturnResponseAs-options",
                        "display": true
                    },
                    {
                        "label": "JSON Structured Output",
                        "name": "llmStructuredOutput",
                        "description": "Instruct the LLM to give output in a JSON structured schema",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "label": "Type",
                                "name": "type",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "String",
                                        "name": "string"
                                    },
                                    {
                                        "label": "String Array",
                                        "name": "stringArray"
                                    },
                                    {
                                        "label": "Number",
                                        "name": "number"
                                    },
                                    {
                                        "label": "Boolean",
                                        "name": "boolean"
                                    },
                                    {
                                        "label": "Enum",
                                        "name": "enum"
                                    },
                                    {
                                        "label": "JSON Array",
                                        "name": "jsonArray"
                                    }
                                ]
                            },
                            {
                                "label": "Enum Values",
                                "name": "enumValues",
                                "type": "string",
                                "placeholder": "value1, value2, value3",
                                "description": "Enum values. Separated by comma",
                                "optional": true,
                                "show": {
                                    "llmStructuredOutput[$index].type": "enum"
                                }
                            },
                            {
                                "label": "JSON Schema",
                                "name": "jsonSchema",
                                "type": "code",
                                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                                "description": "JSON schema for the structured output",
                                "optional": true,
                                "hideCodeExecute": true,
                                "show": {
                                    "llmStructuredOutput[$index].type": "jsonArray"
                                }
                            },
                            {
                                "label": "Description",
                                "name": "description",
                                "type": "string",
                                "placeholder": "Description of the key"
                            }
                        ],
                        "id": "llmAgentflow_0-input-llmStructuredOutput-array",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "llmUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "llmAgentflow_0-input-llmUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "llmModel": "chatGoogleGenerativeAI",
                    "llmMessages": [
                        {
                            "role": "system",
                            "content": "<p>You are a SQL agent designed to generate a single, syntactically correct PostgreSQL SELECT query from a natural language request.</p><p>Rules for query generation:</p><p>- Generate only ONE SELECT query — never multiple statements.</p><p>- Never use SELECT *; always explicitly select only the necessary columns to identify the results clearly.</p><p>- Never generate any data modification statements (INSERT, UPDATE, DELETE, DROP, ALTER, etc.).</p><p>- Only use tables and columns provided in the schema.</p><p>- If the user specifies exact columns to retrieve, use them; otherwise, include key identifying columns (IDs, names, main descriptors).</p><p>- Order results using ORDER BY on the most meaningful column (date, relevance, score, or ID).</p><p>Handling ambiguous or underspecified queries:</p><p>- If the user’s filter value could match multiple columns, search across ALL relevant columns in the table.</p><p>- For text-based columns (VARCHAR, TEXT, CHAR), use case-insensitive partial matching:  </p><p>  <code>column_name ILIKE '%&lt;search_value&gt;%'</code></p><p>- For numeric columns, match with <code>= &lt;search_value&gt;</code>.</p><p>- For date/time columns, match with <code>= '&lt;search_value&gt;'</code>.</p><p>- Combine all possible matches with OR so no potential row is missed.</p><p>- If the user query contains multiple search values, handle them appropriately with AND/OR logic to reflect intent.</p><p>- If no filter value is provided, return a reasonable default dataset (like the most recent 10 rows) ordered by a meaningful column.</p><p>Search flexibility rules:</p><p>- Always make text searches case-insensitive.</p><p>- Always allow partial matches for text searches (wrap search term with <code>%</code> wildcards).</p><p>- Always include all possible matches in any column that logically could contain the search term.</p><p>- If the value could appear in multiple formats (e.g., \"Deepak\", \"DEEPAK\", \"deepak\"), ensure your query still returns them (ILIKE covers this).</p><p>- Avoid guessing column names; use only those present in the schema.</p><p>After running the query:</p><p>- Present the results clearly and concisely.</p><p>- If multiple columns were searched, mention which matched.</p><p>- If multiple rows match, summarize the count and list key identifying fields.</p><p>- If no rows match, state this clearly.</p><p>Example:</p><p>User query: \"Show details of Deepak\"</p><p>Schema: employees(first_name, last_name, email, phone_number, hire_date, job_id, department_id, salary, manager_id)</p><p>Generated SQL:</p><p>SELECT employee_id, first_name, last_name, email, phone_number</p><p>FROM employees</p><p>WHERE first_name ILIKE '%Deepak%'</p><p>   OR last_name ILIKE '%Deepak%'</p><p>   OR email ILIKE '%Deepak%'</p><p>   OR phone_number ILIKE '%Deepak%'</p><p>ORDER BY employee_id;</p><p></p>"
                        }
                    ],
                    "llmEnableMemory": true,
                    "llmMemoryType": "allMessages",
                    "llmUserMessage": "",
                    "llmReturnResponseAs": "userMessage",
                    "llmStructuredOutput": [
                        {
                            "key": "sql_query",
                            "type": "string",
                            "enumValues": "",
                            "jsonSchema": "",
                            "description": "SQL Query"
                        }
                    ],
                    "llmUpdateState": [
                        {
                            "key": "sqlQuery",
                            "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output.sql_query\" data-label=\"output.sql_query\">{{ output.sql_query }}</span> </p>"
                        }
                    ],
                    "llmModelConfig": {
                        "credential": "",
                        "modelName": "gemini-2.5-flash-preview-05-20",
                        "customModelName": "",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxOutputTokens": "",
                        "topP": "",
                        "topK": "",
                        "safetySettings": "",
                        "baseUrl": "",
                        "allowImageUploads": "",
                        "llmModel": "chatGoogleGenerativeAI"
                    },
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "llmAgentflow_0-output-llmAgentflow",
                        "label": "LLM",
                        "name": "llmAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 285,
            "height": 73,
            "selected": false,
            "positionAbsolute": {
                "x": -180.39917955500056,
                "y": -234.14600159179815
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_1",
            "position": {
                "x": 148.71488454489622,
                "y": -231.71872487733816
            },
            "data": {
                "id": "customFunctionAgentflow_1",
                "label": "Run HR DB Query",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_1-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_1-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_1-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": [
                        {
                            "variableName": "sqlQuery",
                            "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.sqlQuery\" data-label=\"$flow.state.sqlQuery\">{{ $flow.state.sqlQuery }}</span> </p>"
                        }
                    ],
                    "customFunctionJavascriptFunction": "const { DataSource } = require('typeorm');\n\n// --- YOUR LOCAL POSTGRESQL CONNECTION DETAILS (Sales Database) ---\nconst HOST = '10.10.20.156';\nconst USER = 'postgres';\nconst PASSWORD = 'password';\nconst DATABASE = 'my_hr_db';\nconst PORT = 5433;\n\nconst sqlQuery = $sqlQuery; // This variable is passed from Flowise's input variables\n\nconst AppDataSource = new DataSource({\n    type: 'postgres',\n    host: HOST,\n    port: PORT,\n    username: USER,\n    password: PASSWORD,\n    database: DATABASE,\n    synchronize: false,\n    logging: false,\n});\n\nlet formattedResult = '';\n\nasync function runSQLQuery(query) {\n    try {\n        console.log(`[Run SQL Query] Attempting to connect to database: ${DATABASE} on ${HOST}:${PORT}`);\n        await AppDataSource.initialize();\n        console.log('[Run SQL Query] Successfully connected and initialized DataSource.');\n\n        const queryRunner = AppDataSource.createQueryRunner();\n\n        console.log(`[Run SQL Query] Executing query: ${query}`);\n        const rows = await queryRunner.query(query);\n        console.log('[Run SQL Query] Query results (rows =):', rows);\n\n        // --- START OF MODIFICATION ---\n        if (rows.length === 0) {\n            // Return only a \"No results\" message, without the query\n            formattedResult = '[No results returned]';\n            console.log('[Run SQL Query] No rows returned for the query.');\n        } else {\n            const columnNames = Object.keys(rows[0]);\n            const header = columnNames.join(' ');\n            const values = rows.map(row =>\n                columnNames.map(col => {\n                    const value = row[col];\n                    if (value === null) return 'NULL';\n                    if (typeof value === 'object' && value !== null) return JSON.stringify(value);\n                    return String(value);\n                }).join(' ')\n            );\n\n            // MODIFIED LINE: Remove 'query + \\n'\n            formattedResult = header + '\\n' + values.join('\\n');\n            console.log('[Run SQL Query] Formatted result generated (data only).');\n        }\n        // --- END OF MODIFICATION ---\n\n        await queryRunner.release();\n        console.log('[Run SQL Query] Query runner released.');\n\n        await AppDataSource.destroy();\n        console.log('[Run SQL Query] DataSource destroyed. Connection closed.');\n\n    } catch (err) {\n        console.error('[Run SQL Query][ERROR]', err);\n        // If there's an error, still return the error message for debugging\n        formattedResult = `[Error executing query]: ${err.message || err}`;\n    }\n\n    return formattedResult;\n}\n\n// Call the function to run the SQL query\nawait runSQLQuery(sqlQuery);\nreturn formattedResult;",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_1-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 187,
            "height": 67,
            "positionAbsolute": {
                "x": 148.71488454489622,
                "y": -231.71872487733816
            },
            "selected": false,
            "dragging": false
        },
        {
            "id": "llmAgentflow_1",
            "position": {
                "x": -922.0756159661944,
                "y": -42.56457567687801
            },
            "data": {
                "id": "llmAgentflow_1",
                "label": "Supervisor",
                "version": 1,
                "name": "llmAgentflow",
                "type": "LLM",
                "color": "#64B5F6",
                "baseClasses": ["LLM"],
                "category": "Agent Flows",
                "description": "Large language models to analyze user-provided inputs and generate responses",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "llmModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "llmAgentflow_1-input-llmModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Messages",
                        "name": "llmMessages",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Role",
                                "name": "role",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "System",
                                        "name": "system"
                                    },
                                    {
                                        "label": "Assistant",
                                        "name": "assistant"
                                    },
                                    {
                                        "label": "Developer",
                                        "name": "developer"
                                    },
                                    {
                                        "label": "User",
                                        "name": "user"
                                    }
                                ]
                            },
                            {
                                "label": "Content",
                                "name": "content",
                                "type": "string",
                                "acceptVariable": true,
                                "generateInstruction": true,
                                "rows": 4
                            }
                        ],
                        "id": "llmAgentflow_1-input-llmMessages-array",
                        "display": true
                    },
                    {
                        "label": "Enable Memory",
                        "name": "llmEnableMemory",
                        "type": "boolean",
                        "description": "Enable memory for the conversation thread",
                        "default": true,
                        "optional": true,
                        "id": "llmAgentflow_1-input-llmEnableMemory-boolean",
                        "display": true
                    },
                    {
                        "label": "Memory Type",
                        "name": "llmMemoryType",
                        "type": "options",
                        "options": [
                            {
                                "label": "All Messages",
                                "name": "allMessages",
                                "description": "Retrieve all messages from the conversation"
                            },
                            {
                                "label": "Window Size",
                                "name": "windowSize",
                                "description": "Uses a fixed window size to surface the last N messages"
                            },
                            {
                                "label": "Conversation Summary",
                                "name": "conversationSummary",
                                "description": "Summarizes the whole conversation"
                            },
                            {
                                "label": "Conversation Summary Buffer",
                                "name": "conversationSummaryBuffer",
                                "description": "Summarize conversations once token limit is reached. Default to 2000"
                            }
                        ],
                        "optional": true,
                        "default": "allMessages",
                        "show": {
                            "llmEnableMemory": true
                        },
                        "id": "llmAgentflow_1-input-llmMemoryType-options",
                        "display": true
                    },
                    {
                        "label": "Window Size",
                        "name": "llmMemoryWindowSize",
                        "type": "number",
                        "default": "20",
                        "description": "Uses a fixed window size to surface the last N messages",
                        "show": {
                            "llmMemoryType": "windowSize"
                        },
                        "id": "llmAgentflow_1-input-llmMemoryWindowSize-number",
                        "display": false
                    },
                    {
                        "label": "Max Token Limit",
                        "name": "llmMemoryMaxTokenLimit",
                        "type": "number",
                        "default": "2000",
                        "description": "Summarize conversations once token limit is reached. Default to 2000",
                        "show": {
                            "llmMemoryType": "conversationSummaryBuffer"
                        },
                        "id": "llmAgentflow_1-input-llmMemoryMaxTokenLimit-number",
                        "display": false
                    },
                    {
                        "label": "Input Message",
                        "name": "llmUserMessage",
                        "type": "string",
                        "description": "Add an input message as user message at the end of the conversation",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "show": {
                            "llmEnableMemory": true
                        },
                        "id": "llmAgentflow_1-input-llmUserMessage-string",
                        "display": true
                    },
                    {
                        "label": "Return Response As",
                        "name": "llmReturnResponseAs",
                        "type": "options",
                        "options": [
                            {
                                "label": "User Message",
                                "name": "userMessage"
                            },
                            {
                                "label": "Assistant Message",
                                "name": "assistantMessage"
                            }
                        ],
                        "default": "userMessage",
                        "id": "llmAgentflow_1-input-llmReturnResponseAs-options",
                        "display": true
                    },
                    {
                        "label": "JSON Structured Output",
                        "name": "llmStructuredOutput",
                        "description": "Instruct the LLM to give output in a JSON structured schema",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "label": "Type",
                                "name": "type",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "String",
                                        "name": "string"
                                    },
                                    {
                                        "label": "String Array",
                                        "name": "stringArray"
                                    },
                                    {
                                        "label": "Number",
                                        "name": "number"
                                    },
                                    {
                                        "label": "Boolean",
                                        "name": "boolean"
                                    },
                                    {
                                        "label": "Enum",
                                        "name": "enum"
                                    },
                                    {
                                        "label": "JSON Array",
                                        "name": "jsonArray"
                                    }
                                ]
                            },
                            {
                                "label": "Enum Values",
                                "name": "enumValues",
                                "type": "string",
                                "placeholder": "value1, value2, value3",
                                "description": "Enum values. Separated by comma",
                                "optional": true,
                                "show": {
                                    "llmStructuredOutput[$index].type": "enum"
                                }
                            },
                            {
                                "label": "JSON Schema",
                                "name": "jsonSchema",
                                "type": "code",
                                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                                "description": "JSON schema for the structured output",
                                "optional": true,
                                "hideCodeExecute": true,
                                "show": {
                                    "llmStructuredOutput[$index].type": "jsonArray"
                                }
                            },
                            {
                                "label": "Description",
                                "name": "description",
                                "type": "string",
                                "placeholder": "Description of the key"
                            }
                        ],
                        "id": "llmAgentflow_1-input-llmStructuredOutput-array",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "llmUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "llmAgentflow_1-input-llmUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "llmModel": "chatGoogleGenerativeAI",
                    "llmMessages": "",
                    "llmEnableMemory": true,
                    "llmMemoryType": "allMessages",
                    "llmUserMessage": "<p>You are an agent that selects the most relevant database based on the user's question.</p><p>Available databases:</p><p>- HR_DB: Contains information about employees, departments, jobs, and payroll. Use this for questions about personnel, salaries, departments, or job roles.</p><p>- SALES_DB: Contains information about sales, orders, customers, status and products. Use this for questions about sales performance, customer data, or product sales.</p><p>Instructions:</p><p>- Analyze the user's question carefully.</p><p>- Output the name of the single most relevant database.</p><p>- If no database is suitable, output \"NONE\".</p><p>Always respond ONLY with a valid JSON object in this format:</p><p>{ \"database_name\": \"HR_DB\" }</p><p>or</p><p>{ \"database_name\": \"SALES_DB\" }</p><p>or</p><p>{ \"database_name\": \"NONE\" }</p><p>User question: <span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span></p><p></p>",
                    "llmReturnResponseAs": "userMessage",
                    "llmStructuredOutput": [
                        {
                            "key": "database_name",
                            "type": "string",
                            "enumValues": "",
                            "jsonSchema": "",
                            "description": "The name of the most relevant database (e.g., HR_DB, SALES_DB, NONE)."
                        }
                    ],
                    "llmUpdateState": [
                        {
                            "key": "selected_DB",
                            "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output.database_name\" data-label=\"output.database_name\">{{ output.database_name }}</span> </p>"
                        }
                    ],
                    "llmModelConfig": {
                        "credential": "",
                        "modelName": "gemini-2.5-flash-preview-05-20",
                        "customModelName": "",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxOutputTokens": "",
                        "topP": "",
                        "topK": "",
                        "safetySettings": "",
                        "baseUrl": "",
                        "allowImageUploads": "",
                        "llmModel": "chatGoogleGenerativeAI"
                    }
                },
                "outputAnchors": [
                    {
                        "id": "llmAgentflow_1-output-llmAgentflow",
                        "label": "LLM",
                        "name": "llmAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 285,
            "height": 73,
            "selected": false,
            "positionAbsolute": {
                "x": -922.0756159661944,
                "y": -42.56457567687801
            },
            "dragging": false
        },
        {
            "id": "conditionAgentflow_0",
            "position": {
                "x": -579.2443280639775,
                "y": -57.72952195011169
            },
            "data": {
                "id": "conditionAgentflow_0",
                "label": "DB Decider",
                "version": 1,
                "name": "conditionAgentflow",
                "type": "Condition",
                "color": "#FFB938",
                "baseClasses": ["Condition"],
                "category": "Agent Flows",
                "description": "Split flows based on If Else conditions",
                "inputParams": [
                    {
                        "label": "Conditions",
                        "name": "conditions",
                        "type": "array",
                        "description": "Values to compare",
                        "acceptVariable": true,
                        "default": [
                            {
                                "type": "string",
                                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"llmAgentflow_1\" data-label=\"llmAgentflow_1\">{{ llmAgentflow_1 }}</span> </p>",
                                "operation": "equal",
                                "value2": "<p>'HR_DB'</p>"
                            }
                        ],
                        "array": [
                            {
                                "label": "Type",
                                "name": "type",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "String",
                                        "name": "string"
                                    },
                                    {
                                        "label": "Number",
                                        "name": "number"
                                    },
                                    {
                                        "label": "Boolean",
                                        "name": "boolean"
                                    }
                                ],
                                "default": "string"
                            },
                            {
                                "label": "Value 1",
                                "name": "value1",
                                "type": "string",
                                "default": "",
                                "description": "First value to be compared with",
                                "acceptVariable": true,
                                "show": {
                                    "conditions[$index].type": "string"
                                }
                            },
                            {
                                "label": "Operation",
                                "name": "operation",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "Contains",
                                        "name": "contains"
                                    },
                                    {
                                        "label": "Ends With",
                                        "name": "endsWith"
                                    },
                                    {
                                        "label": "Equal",
                                        "name": "equal"
                                    },
                                    {
                                        "label": "Not Contains",
                                        "name": "notContains"
                                    },
                                    {
                                        "label": "Not Equal",
                                        "name": "notEqual"
                                    },
                                    {
                                        "label": "Regex",
                                        "name": "regex"
                                    },
                                    {
                                        "label": "Starts With",
                                        "name": "startsWith"
                                    },
                                    {
                                        "label": "Is Empty",
                                        "name": "isEmpty"
                                    },
                                    {
                                        "label": "Not Empty",
                                        "name": "notEmpty"
                                    }
                                ],
                                "default": "equal",
                                "description": "Type of operation",
                                "show": {
                                    "conditions[$index].type": "string"
                                }
                            },
                            {
                                "label": "Value 2",
                                "name": "value2",
                                "type": "string",
                                "default": "",
                                "description": "Second value to be compared with",
                                "acceptVariable": true,
                                "show": {
                                    "conditions[$index].type": "string"
                                },
                                "hide": {
                                    "conditions[$index].operation": ["isEmpty", "notEmpty"]
                                }
                            },
                            {
                                "label": "Value 1",
                                "name": "value1",
                                "type": "number",
                                "default": "",
                                "description": "First value to be compared with",
                                "acceptVariable": true,
                                "show": {
                                    "conditions[$index].type": "number"
                                }
                            },
                            {
                                "label": "Operation",
                                "name": "operation",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "Smaller",
                                        "name": "smaller"
                                    },
                                    {
                                        "label": "Smaller Equal",
                                        "name": "smallerEqual"
                                    },
                                    {
                                        "label": "Equal",
                                        "name": "equal"
                                    },
                                    {
                                        "label": "Not Equal",
                                        "name": "notEqual"
                                    },
                                    {
                                        "label": "Larger",
                                        "name": "larger"
                                    },
                                    {
                                        "label": "Larger Equal",
                                        "name": "largerEqual"
                                    },
                                    {
                                        "label": "Is Empty",
                                        "name": "isEmpty"
                                    },
                                    {
                                        "label": "Not Empty",
                                        "name": "notEmpty"
                                    }
                                ],
                                "default": "equal",
                                "description": "Type of operation",
                                "show": {
                                    "conditions[$index].type": "number"
                                }
                            },
                            {
                                "label": "Value 2",
                                "name": "value2",
                                "type": "number",
                                "default": 0,
                                "description": "Second value to be compared with",
                                "acceptVariable": true,
                                "show": {
                                    "conditions[$index].type": "number"
                                }
                            },
                            {
                                "label": "Value 1",
                                "name": "value1",
                                "type": "boolean",
                                "default": false,
                                "description": "First value to be compared with",
                                "show": {
                                    "conditions[$index].type": "boolean"
                                }
                            },
                            {
                                "label": "Operation",
                                "name": "operation",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "Equal",
                                        "name": "equal"
                                    },
                                    {
                                        "label": "Not Equal",
                                        "name": "notEqual"
                                    }
                                ],
                                "default": "equal",
                                "description": "Type of operation",
                                "show": {
                                    "conditions[$index].type": "boolean"
                                }
                            },
                            {
                                "label": "Value 2",
                                "name": "value2",
                                "type": "boolean",
                                "default": false,
                                "description": "Second value to be compared with",
                                "show": {
                                    "conditions[$index].type": "boolean"
                                }
                            }
                        ],
                        "id": "conditionAgentflow_0-input-conditions-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "conditions": [
                        {
                            "type": "string",
                            "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.selected_DB\" data-label=\"$flow.state.selected_DB\">{{ $flow.state.selected_DB }}</span> </p>",
                            "operation": "equal",
                            "value2": "<p>HR_DB</p>"
                        },
                        {
                            "type": "string",
                            "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.selected_DB\" data-label=\"$flow.state.selected_DB\">{{ $flow.state.selected_DB }}</span> </p>",
                            "operation": "equal",
                            "value2": "<p>SALES_DB</p>"
                        }
                    ]
                },
                "outputAnchors": [
                    {
                        "id": "conditionAgentflow_0-output-0",
                        "label": 0,
                        "name": 0,
                        "description": "Condition 0"
                    },
                    {
                        "id": "conditionAgentflow_0-output-1",
                        "label": 1,
                        "name": 1,
                        "description": "Condition 1"
                    },
                    {
                        "id": "conditionAgentflow_0-output-2",
                        "label": 2,
                        "name": 2,
                        "description": "Else"
                    }
                ],
                "outputs": {
                    "conditionAgentflow": ""
                },
                "selected": false
            },
            "type": "agentFlow",
            "width": 146,
            "height": 100,
            "selected": false,
            "positionAbsolute": {
                "x": -579.2443280639775,
                "y": -57.72952195011169
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_2",
            "position": {
                "x": -356.2282280931611,
                "y": 28.906401788367248
            },
            "data": {
                "id": "customFunctionAgentflow_2",
                "label": "MY_SALES_DB",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_2-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_2-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_2-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": "",
                    "customFunctionJavascriptFunction": "const { DataSource } = require('typeorm');\n\n// --- Connection for Sales DB ---\n// (Keep your specific DB connection details here for each Custom Function)\nconst HOST = '10.10.20.156';\nconst USER = 'postgres';\nconst PASSWORD = 'password';\nconst DATABASE = 'my_sales_db';\nconst PORT = 5433;\n\nlet sqlSchemaPrompt = '';\n\nconst AppDataSource = new DataSource({\n    type: 'postgres',\n    host: HOST,\n    port: PORT,\n    username: USER,\n    password: PASSWORD,\n    database: DATABASE,\n    synchronize: false,\n    logging: false,\n});\n\nasync function getSQLPrompt() {\n    try {\n        console.log(`Attempting to connect to database: ${DATABASE} on ${HOST}:${PORT}`);\n        await AppDataSource.initialize();\n        console.log('Successfully connected to the database and initialized DataSource.');\n\n        const queryRunner = AppDataSource.createQueryRunner();\n\n        // Get all user-defined tables\n        const tablesResult = await queryRunner.query(`\n            SELECT table_name\n            FROM information_schema.tables\n            WHERE table_schema = 'public' AND table_type = 'BASE TABLE'\n        `);\n        console.log(`Found ${tablesResult.length} tables in schema.`);\n\n        for (const tableRow of tablesResult) {\n            const tableName = tableRow.table_name;\n            // Corrected query to fetch column details including comments\n            const schemaInfo = await queryRunner.query(`\n                SELECT\n                    c.column_name,\n                    c.data_type,\n                    c.is_nullable,\n                    pg_catalog.col_description(\n                        (SELECT 'public.${tableName}'::regclass::oid),\n                        c.ordinal_position\n                    ) AS column_comment\n                FROM\n                    information_schema.columns AS c\n                WHERE\n                    c.table_schema = 'public' AND c.table_name = '${tableName}'\n                ORDER BY\n                    c.ordinal_position;\n            `);\n\n            const createColumns = [];\n            for (const column of schemaInfo) {\n                const name = column.column_name;\n                const type = column.data_type.toUpperCase();\n                const notNull = column.is_nullable === 'NO' ? 'NOT NULL' : '';\n                const comment = column.column_comment ? ` -- ${column.column_comment}` : '';\n                createColumns.push(`${name} ${type} ${notNull}${comment}`);\n            }\n\n            // Construct only the CREATE TABLE statement (schema)\n            sqlSchemaPrompt += `CREATE TABLE ${tableName} (\\n  ${createColumns.join(',\\n  ')}\\n);\\n\\n`;\n        }\n\n        await queryRunner.release();\n        await AppDataSource.destroy();\n        console.log('DataSource destroyed. Database operations complete.');\n\n    } catch (err) {\n        console.error('An error occurred during database schema retrieval:', err);\n        // Ensure that in case of an error, sqlSchemaPrompt is still set to something\n        // or re-throw the error so Flowise knows there was a failure.\n        sqlSchemaPrompt = `[ERROR FETCHING SCHEMA]: ${err.message || err}`;\n        throw err; // Re-throw to propagate the error in Flowise\n    }\n}\n\nawait getSQLPrompt();\nreturn sqlSchemaPrompt;",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_2-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 170,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": -356.2282280931611,
                "y": 28.906401788367248
            },
            "dragging": false
        },
        {
            "id": "llmAgentflow_2",
            "position": {
                "x": -148.64529718590643,
                "y": 22.333698430701844
            },
            "data": {
                "id": "llmAgentflow_2",
                "label": "Query Generator",
                "version": 1,
                "name": "llmAgentflow",
                "type": "LLM",
                "color": "#64B5F6",
                "baseClasses": ["LLM"],
                "category": "Agent Flows",
                "description": "Large language models to analyze user-provided inputs and generate responses",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "llmModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "llmAgentflow_2-input-llmModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Messages",
                        "name": "llmMessages",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Role",
                                "name": "role",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "System",
                                        "name": "system"
                                    },
                                    {
                                        "label": "Assistant",
                                        "name": "assistant"
                                    },
                                    {
                                        "label": "Developer",
                                        "name": "developer"
                                    },
                                    {
                                        "label": "User",
                                        "name": "user"
                                    }
                                ]
                            },
                            {
                                "label": "Content",
                                "name": "content",
                                "type": "string",
                                "acceptVariable": true,
                                "generateInstruction": true,
                                "rows": 4
                            }
                        ],
                        "id": "llmAgentflow_2-input-llmMessages-array",
                        "display": true
                    },
                    {
                        "label": "Enable Memory",
                        "name": "llmEnableMemory",
                        "type": "boolean",
                        "description": "Enable memory for the conversation thread",
                        "default": true,
                        "optional": true,
                        "id": "llmAgentflow_2-input-llmEnableMemory-boolean",
                        "display": true
                    },
                    {
                        "label": "Memory Type",
                        "name": "llmMemoryType",
                        "type": "options",
                        "options": [
                            {
                                "label": "All Messages",
                                "name": "allMessages",
                                "description": "Retrieve all messages from the conversation"
                            },
                            {
                                "label": "Window Size",
                                "name": "windowSize",
                                "description": "Uses a fixed window size to surface the last N messages"
                            },
                            {
                                "label": "Conversation Summary",
                                "name": "conversationSummary",
                                "description": "Summarizes the whole conversation"
                            },
                            {
                                "label": "Conversation Summary Buffer",
                                "name": "conversationSummaryBuffer",
                                "description": "Summarize conversations once token limit is reached. Default to 2000"
                            }
                        ],
                        "optional": true,
                        "default": "allMessages",
                        "show": {
                            "llmEnableMemory": true
                        },
                        "id": "llmAgentflow_2-input-llmMemoryType-options",
                        "display": true
                    },
                    {
                        "label": "Window Size",
                        "name": "llmMemoryWindowSize",
                        "type": "number",
                        "default": "20",
                        "description": "Uses a fixed window size to surface the last N messages",
                        "show": {
                            "llmMemoryType": "windowSize"
                        },
                        "id": "llmAgentflow_2-input-llmMemoryWindowSize-number",
                        "display": false
                    },
                    {
                        "label": "Max Token Limit",
                        "name": "llmMemoryMaxTokenLimit",
                        "type": "number",
                        "default": "2000",
                        "description": "Summarize conversations once token limit is reached. Default to 2000",
                        "show": {
                            "llmMemoryType": "conversationSummaryBuffer"
                        },
                        "id": "llmAgentflow_2-input-llmMemoryMaxTokenLimit-number",
                        "display": false
                    },
                    {
                        "label": "Input Message",
                        "name": "llmUserMessage",
                        "type": "string",
                        "description": "Add an input message as user message at the end of the conversation",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "show": {
                            "llmEnableMemory": true
                        },
                        "id": "llmAgentflow_2-input-llmUserMessage-string",
                        "display": true
                    },
                    {
                        "label": "Return Response As",
                        "name": "llmReturnResponseAs",
                        "type": "options",
                        "options": [
                            {
                                "label": "User Message",
                                "name": "userMessage"
                            },
                            {
                                "label": "Assistant Message",
                                "name": "assistantMessage"
                            }
                        ],
                        "default": "userMessage",
                        "id": "llmAgentflow_2-input-llmReturnResponseAs-options",
                        "display": true
                    },
                    {
                        "label": "JSON Structured Output",
                        "name": "llmStructuredOutput",
                        "description": "Instruct the LLM to give output in a JSON structured schema",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "string"
                            },
                            {
                                "label": "Type",
                                "name": "type",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "String",
                                        "name": "string"
                                    },
                                    {
                                        "label": "String Array",
                                        "name": "stringArray"
                                    },
                                    {
                                        "label": "Number",
                                        "name": "number"
                                    },
                                    {
                                        "label": "Boolean",
                                        "name": "boolean"
                                    },
                                    {
                                        "label": "Enum",
                                        "name": "enum"
                                    },
                                    {
                                        "label": "JSON Array",
                                        "name": "jsonArray"
                                    }
                                ]
                            },
                            {
                                "label": "Enum Values",
                                "name": "enumValues",
                                "type": "string",
                                "placeholder": "value1, value2, value3",
                                "description": "Enum values. Separated by comma",
                                "optional": true,
                                "show": {
                                    "llmStructuredOutput[$index].type": "enum"
                                }
                            },
                            {
                                "label": "JSON Schema",
                                "name": "jsonSchema",
                                "type": "code",
                                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                                "description": "JSON schema for the structured output",
                                "optional": true,
                                "hideCodeExecute": true,
                                "show": {
                                    "llmStructuredOutput[$index].type": "jsonArray"
                                }
                            },
                            {
                                "label": "Description",
                                "name": "description",
                                "type": "string",
                                "placeholder": "Description of the key"
                            }
                        ],
                        "id": "llmAgentflow_2-input-llmStructuredOutput-array",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "llmUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "llmAgentflow_2-input-llmUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "llmModel": "chatGoogleGenerativeAI",
                    "llmMessages": [
                        {
                            "role": "system",
                            "content": "<p>You are an agent designed to interact with a SQL database.</p><p>Your task:</p><p>- Given an input question, create a syntactically correct PostgreSQL query to run.</p><p>- Then look at the results of the query and return a clear, direct answer based on those results.</p><p>Rules:</p><p>- Only generate ONE SQL query — no multiple statements.</p><p>- Never use SELECT * — only select the specific columns needed to answer the question.</p><p>- Never write any DML statements (INSERT, UPDATE, DELETE, DROP, ALTER, etc.).</p><p>- You may use SELECT, WHERE, GROUP BY, ORDER BY, LIMIT, and aggregate functions (e.g., COUNT, SUM, AVG) where appropriate.</p><p>- If applicable, order the results using ORDER BY on the most meaningful column (e.g., date, score, value, relevance).</p><p>Here is the relevant table info:</p><p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_2\" data-label=\"customFunctionAgentflow_2\">{{ customFunctionAgentflow_2 }}</span> </p><p>Always output ONLY a single JSON object in this exact format:</p><p>{\"sql_query\": \" <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.sqlQuery\" data-label=\"$flow.state.sqlQuery\">{{ $flow.state.sqlQuery }}</span> \"}</p><p></p>"
                        }
                    ],
                    "llmEnableMemory": true,
                    "llmMemoryType": "allMessages",
                    "llmUserMessage": "",
                    "llmReturnResponseAs": "userMessage",
                    "llmStructuredOutput": [
                        {
                            "key": "sql_query",
                            "type": "string",
                            "enumValues": "",
                            "jsonSchema": "",
                            "description": "SQL Query"
                        }
                    ],
                    "llmUpdateState": [
                        {
                            "key": "sqlQuery",
                            "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output.sql_query\" data-label=\"output.sql_query\">{{ output.sql_query }}</span> </p>"
                        }
                    ],
                    "llmModelConfig": {
                        "credential": "",
                        "modelName": "gemini-2.5-flash-preview-05-20",
                        "customModelName": "",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxOutputTokens": "",
                        "topP": "",
                        "topK": "",
                        "safetySettings": "",
                        "baseUrl": "",
                        "allowImageUploads": "",
                        "llmModel": "chatGoogleGenerativeAI"
                    },
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "llmAgentflow_2-output-llmAgentflow",
                        "label": "LLM",
                        "name": "llmAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 285,
            "height": 73,
            "selected": false,
            "positionAbsolute": {
                "x": -148.64529718590643,
                "y": 22.333698430701844
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_3",
            "position": {
                "x": 170.25007633081646,
                "y": 23.526918256397494
            },
            "data": {
                "id": "customFunctionAgentflow_3",
                "label": "Run Sales DB Query",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_3-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_3-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_3-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": [
                        {
                            "variableName": "sqlQuery",
                            "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.sqlQuery\" data-label=\"$flow.state.sqlQuery\">{{ $flow.state.sqlQuery }}</span> </p>"
                        }
                    ],
                    "customFunctionJavascriptFunction": "const { DataSource } = require('typeorm');\n\n// --- YOUR LOCAL POSTGRESQL CONNECTION DETAILS (Sales Database) ---\n// These values are taken from your provided .env file for the SALES_DB.\n// If you change them in your .env, remember to update them here if you're not using process.env\n// For best practice, use process.env as shown in my previous answer.\nconst HOST = '10.10.20.156';\nconst USER = 'postgres';\nconst PASSWORD = 'password';\nconst DATABASE = 'my_sales_db';\nconst PORT = 5433;\n\nconst sqlQuery = $sqlQuery; // This variable is passed from Flowise's input variables\n\nconst AppDataSource = new DataSource({\n  type: 'postgres',\n  host: HOST,\n  port: PORT,\n  username: USER,\n  password: PASSWORD,\n  database: DATABASE,\n  synchronize: false, // Keep as false for existing databases\n  logging: false,     // Set to true if you want TypeORM to log SQL queries to the Flowise server console\n});\n\nlet formattedResult = '';\n\nasync function runSQLQuery(query) {\n  try {\n    // Attempt to initialize the data source (connect to DB)\n    console.log(`[Run SQL Query] Attempting to connect to database: ${DATABASE} on ${HOST}:${PORT}`);\n    await AppDataSource.initialize();\n    console.log('[Run SQL Query] Successfully connected and initialized DataSource.');\n\n    const queryRunner = AppDataSource.createQueryRunner();\n\n    // Execute the SQL query\n    console.log(`[Run SQL Query] Executing query: ${query}`);\n    const rows = await queryRunner.query(query);\n    console.log('[Run SQL Query] Query results (rows =):', rows);\n\n    // Format the results for output\n    if (rows.length === 0) {\n      formattedResult = '[No results returned]';\n      console.log('[Run SQL Query] No rows returned for the query.');\n    } else {\n      const columnNames = Object.keys(rows[0]);\n      const header = columnNames.join(' ');\n      const values = rows.map(row =>\n        columnNames.map(col => {\n          // Handle potential null values or complex objects\n          const value = row[col];\n          if (value === null) return 'NULL';\n          if (typeof value === 'object' && value !== null) return JSON.stringify(value); // Convert objects to JSON string\n          return String(value);\n        }).join(' ')\n      );\n\n      // --- MODIFIED LINE HERE ---\n      formattedResult = header + '\\n' + values.join('\\n'); // Removed 'query + \\n'\n      console.log('[Run SQL Query] Formatted result generated (data only).');\n    }\n\n    // Release the query runner\n    await queryRunner.release();\n    console.log('[Run SQL Query] Query runner released.');\n\n    // IMPORTANT: Destroy the DataSource to properly close the database connection.\n    // This prevents connection leaks, especially when the function runs for each query.\n    await AppDataSource.destroy();\n    console.log('[Run SQL Query] DataSource destroyed. Connection closed.');\n\n  } catch (err) {\n    // Log and format any errors during connection or query execution\n    console.error('[Run SQL Query][ERROR]', err);\n    // Include the error message from the error object for better detail\n    formattedResult = `[Error executing query]: ${err.message || err}`;\n  }\n\n  return formattedResult;\n}\n\n// Call the function to run the SQL query\nawait runSQLQuery(sqlQuery);\nreturn formattedResult;",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_3-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 203,
            "height": 67,
            "positionAbsolute": {
                "x": 170.25007633081646,
                "y": 23.526918256397494
            },
            "selected": false,
            "dragging": false
        },
        {
            "id": "conditionAgentAgentflow_0",
            "position": {
                "x": 387.72560375765903,
                "y": -246.79341674265504
            },
            "data": {
                "id": "conditionAgentAgentflow_0",
                "label": "Data Checker",
                "version": 1.1,
                "name": "conditionAgentAgentflow",
                "type": "ConditionAgent",
                "color": "#ff8fab",
                "baseClasses": ["ConditionAgent"],
                "category": "Agent Flows",
                "description": "Utilize an agent to split flows based on dynamic conditions",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "conditionAgentModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "conditionAgentAgentflow_0-input-conditionAgentModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Instructions",
                        "name": "conditionAgentInstructions",
                        "type": "string",
                        "description": "A general instructions of what the condition agent should do",
                        "rows": 4,
                        "acceptVariable": true,
                        "placeholder": "Determine if the user is interested in learning about AI",
                        "id": "conditionAgentAgentflow_0-input-conditionAgentInstructions-string",
                        "display": true
                    },
                    {
                        "label": "Input",
                        "name": "conditionAgentInput",
                        "type": "string",
                        "description": "Input to be used for the condition agent",
                        "rows": 4,
                        "acceptVariable": true,
                        "default": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
                        "id": "conditionAgentAgentflow_0-input-conditionAgentInput-string",
                        "display": true
                    },
                    {
                        "label": "Scenarios",
                        "name": "conditionAgentScenarios",
                        "description": "Define the scenarios that will be used as the conditions to split the flow",
                        "type": "array",
                        "array": [
                            {
                                "label": "Scenario",
                                "name": "scenario",
                                "type": "string",
                                "placeholder": "User is asking for a pizza"
                            }
                        ],
                        "default": [
                            {
                                "scenario": "if output is right"
                            },
                            {
                                "scenario": "if output is error or something"
                            }
                        ],
                        "id": "conditionAgentAgentflow_0-input-conditionAgentScenarios-array",
                        "display": true
                    },
                    {
                        "label": "Override System Prompt",
                        "name": "conditionAgentOverrideSystemPrompt",
                        "type": "boolean",
                        "description": "Override initial system prompt for Condition Agent",
                        "optional": true,
                        "id": "conditionAgentAgentflow_0-input-conditionAgentOverrideSystemPrompt-boolean",
                        "display": true
                    },
                    {
                        "label": "Node System Prompt",
                        "name": "conditionAgentSystemPrompt",
                        "type": "string",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "default": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p>\n    <ul>\n        <li><strong>Input</strong>: A string representing the user's query, message or data.</li>\n        <li><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</li>\n        <li><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n        <li><strong>Read the input string</strong> and the list of scenarios.</li>\n        <li><strong>Analyze the content of the input</strong> to identify its main topic or intention.</li>\n        <li><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</li>\n        <li><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</li>\n    </ol>\n    <h2>Output Format</h2>\n    <p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"<selected_scenario_name>\"}</code>. No explanation is needed.</p>\n    <h2>Examples</h2>\n    <ol>\n       <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p>\n        </li>\n    </ol>\n    <h2>Note</h2>\n    <ul>\n        <li>Ensure that the input scenarios align well with potential user queries for accurate matching.</li>\n        <li>DO NOT include anything other than the JSON in your response.</li>\n    </ul>",
                        "description": "Expert use only. Modifying this can significantly alter agent behavior. Leave default if unsure",
                        "show": {
                            "conditionAgentOverrideSystemPrompt": true
                        },
                        "id": "conditionAgentAgentflow_0-input-conditionAgentSystemPrompt-string",
                        "display": false
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "conditionAgentModel": "chatGoogleGenerativeAI",
                    "conditionAgentInstructions": "",
                    "conditionAgentInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_1\" data-label=\"customFunctionAgentflow_1\">{{ customFunctionAgentflow_1 }}</span> </p>",
                    "conditionAgentScenarios": [
                        {
                            "scenario": "if output is showing data"
                        },
                        {
                            "scenario": "if output is showing syntax error"
                        },
                        {
                            "scenario": "if out is showing no result found"
                        }
                    ],
                    "conditionAgentOverrideSystemPrompt": "",
                    "conditionAgentModelConfig": {
                        "cache": "",
                        "modelName": "gemini-2.5-flash-preview-05-20",
                        "customModelName": "",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxOutputTokens": "",
                        "topP": "",
                        "topK": "",
                        "safetySettings": "",
                        "baseUrl": "",
                        "allowImageUploads": "",
                        "conditionAgentModel": "chatGoogleGenerativeAI"
                    }
                },
                "outputAnchors": [
                    {
                        "id": "conditionAgentAgentflow_0-output-0",
                        "label": 0,
                        "name": 0,
                        "description": "Condition 0"
                    },
                    {
                        "id": "conditionAgentAgentflow_0-output-1",
                        "label": 1,
                        "name": 1,
                        "description": "Condition 1"
                    },
                    {
                        "id": "conditionAgentAgentflow_0-output-2",
                        "label": 2,
                        "name": 2,
                        "description": "Condition 2"
                    }
                ],
                "outputs": {
                    "conditionAgentAgentflow": ""
                },
                "selected": false
            },
            "type": "agentFlow",
            "width": 285,
            "height": 100,
            "selected": false,
            "positionAbsolute": {
                "x": 387.72560375765903,
                "y": -246.79341674265504
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_4",
            "position": {
                "x": 745.6550575011095,
                "y": -314.3197674566355
            },
            "data": {
                "id": "customFunctionAgentflow_4",
                "label": "Final Data",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_4-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_4-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_4-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": [
                        {
                            "variableName": "incomingData",
                            "variableValue": "<p>{{ customFunctionAgentflow_1}}</p>"
                        }
                    ],
                    "customFunctionJavascriptFunction": "// This variable ($incomingData) will receive the content of {{customFunctionAgentflow_1.output.data}}.\n// The name 'incomingData' must exactly match the 'Variable Name' you set\n// in the connection pop-up when linking the two custom functions.\nconst incomingData = $incomingData; \n\n// Simply return the received input directly as the output of this custom function.\n// This makes this custom function act as a pure passthrough.\nreturn incomingData;",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_4-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 138,
            "height": 67,
            "positionAbsolute": {
                "x": 745.6550575011095,
                "y": -314.3197674566355
            },
            "selected": false,
            "dragging": false
        },
        {
            "id": "loopAgentflow_0",
            "position": {
                "x": 748.3671148216142,
                "y": -232.1124925402725
            },
            "data": {
                "id": "loopAgentflow_0",
                "label": "Loop to query generator",
                "version": 1,
                "name": "loopAgentflow",
                "type": "Loop",
                "color": "#FFA07A",
                "hideOutput": true,
                "baseClasses": ["Loop"],
                "category": "Agent Flows",
                "description": "Loop back to a previous node",
                "inputParams": [
                    {
                        "label": "Loop Back To",
                        "name": "loopBackToNode",
                        "type": "asyncOptions",
                        "loadMethod": "listPreviousNodes",
                        "freeSolo": true,
                        "id": "loopAgentflow_0-input-loopBackToNode-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Max Loop Count",
                        "name": "maxLoopCount",
                        "type": "number",
                        "default": 5,
                        "id": "loopAgentflow_0-input-maxLoopCount-number",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "loopBackToNode": "llmAgentflow_0-Query Generator",
                    "maxLoopCount": 5,
                    "undefined": ""
                },
                "outputAnchors": [],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 231,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": 748.3671148216142,
                "y": -232.1124925402725
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_5",
            "position": {
                "x": 754.5893529308372,
                "y": -158.71479238552155
            },
            "data": {
                "id": "customFunctionAgentflow_5",
                "label": "Handling no data",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_5-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_5-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_5-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": "",
                    "customFunctionJavascriptFunction": " return \"We are sorry, The data is not found on the database\";",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_5-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 183,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": 754.5893529308372,
                "y": -158.71479238552155
            },
            "dragging": false
        },
        {
            "id": "conditionAgentAgentflow_1",
            "position": {
                "x": 418.848309770881,
                "y": -3.1161064094453508
            },
            "data": {
                "id": "conditionAgentAgentflow_1",
                "label": "Data Checker",
                "version": 1.1,
                "name": "conditionAgentAgentflow",
                "type": "ConditionAgent",
                "color": "#ff8fab",
                "baseClasses": ["ConditionAgent"],
                "category": "Agent Flows",
                "description": "Utilize an agent to split flows based on dynamic conditions",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "conditionAgentModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "conditionAgentAgentflow_1-input-conditionAgentModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Instructions",
                        "name": "conditionAgentInstructions",
                        "type": "string",
                        "description": "A general instructions of what the condition agent should do",
                        "rows": 4,
                        "acceptVariable": true,
                        "placeholder": "Determine if the user is interested in learning about AI",
                        "id": "conditionAgentAgentflow_1-input-conditionAgentInstructions-string",
                        "display": true
                    },
                    {
                        "label": "Input",
                        "name": "conditionAgentInput",
                        "type": "string",
                        "description": "Input to be used for the condition agent",
                        "rows": 4,
                        "acceptVariable": true,
                        "default": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
                        "id": "conditionAgentAgentflow_1-input-conditionAgentInput-string",
                        "display": true
                    },
                    {
                        "label": "Scenarios",
                        "name": "conditionAgentScenarios",
                        "description": "Define the scenarios that will be used as the conditions to split the flow",
                        "type": "array",
                        "array": [
                            {
                                "label": "Scenario",
                                "name": "scenario",
                                "type": "string",
                                "placeholder": "User is asking for a pizza"
                            }
                        ],
                        "default": [
                            {
                                "scenario": "if output is right"
                            },
                            {
                                "scenario": "if output is error or something"
                            }
                        ],
                        "id": "conditionAgentAgentflow_1-input-conditionAgentScenarios-array",
                        "display": true
                    },
                    {
                        "label": "Override System Prompt",
                        "name": "conditionAgentOverrideSystemPrompt",
                        "type": "boolean",
                        "description": "Override initial system prompt for Condition Agent",
                        "optional": true,
                        "id": "conditionAgentAgentflow_1-input-conditionAgentOverrideSystemPrompt-boolean",
                        "display": true
                    },
                    {
                        "label": "Node System Prompt",
                        "name": "conditionAgentSystemPrompt",
                        "type": "string",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "default": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p>\n    <ul>\n        <li><strong>Input</strong>: A string representing the user's query, message or data.</li>\n        <li><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</li>\n        <li><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n        <li><strong>Read the input string</strong> and the list of scenarios.</li>\n        <li><strong>Analyze the content of the input</strong> to identify its main topic or intention.</li>\n        <li><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</li>\n        <li><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</li>\n    </ol>\n    <h2>Output Format</h2>\n    <p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"<selected_scenario_name>\"}</code>. No explanation is needed.</p>\n    <h2>Examples</h2>\n    <ol>\n       <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p>\n        </li>\n    </ol>\n    <h2>Note</h2>\n    <ul>\n        <li>Ensure that the input scenarios align well with potential user queries for accurate matching.</li>\n        <li>DO NOT include anything other than the JSON in your response.</li>\n    </ul>",
                        "description": "Expert use only. Modifying this can significantly alter agent behavior. Leave default if unsure",
                        "show": {
                            "conditionAgentOverrideSystemPrompt": true
                        },
                        "id": "conditionAgentAgentflow_1-input-conditionAgentSystemPrompt-string",
                        "display": false
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "conditionAgentModel": "chatGoogleGenerativeAI",
                    "conditionAgentInstructions": "",
                    "conditionAgentInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_3\" data-label=\"customFunctionAgentflow_3\">{{ customFunctionAgentflow_3 }}</span> </p>",
                    "conditionAgentScenarios": [
                        {
                            "scenario": "if output is showing data"
                        },
                        {
                            "scenario": "if output is showing syntax error"
                        },
                        {
                            "scenario": "if out is showing no result found"
                        }
                    ],
                    "conditionAgentOverrideSystemPrompt": "",
                    "conditionAgentModelConfig": {
                        "cache": "",
                        "modelName": "gemini-2.5-flash-preview-05-20",
                        "customModelName": "",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxOutputTokens": "",
                        "topP": "",
                        "topK": "",
                        "safetySettings": "",
                        "baseUrl": "",
                        "allowImageUploads": "",
                        "conditionAgentModel": "chatGoogleGenerativeAI"
                    }
                },
                "outputAnchors": [
                    {
                        "id": "conditionAgentAgentflow_1-output-0",
                        "label": 0,
                        "name": 0,
                        "description": "Condition 0"
                    },
                    {
                        "id": "conditionAgentAgentflow_1-output-1",
                        "label": 1,
                        "name": 1,
                        "description": "Condition 1"
                    },
                    {
                        "id": "conditionAgentAgentflow_1-output-2",
                        "label": 2,
                        "name": 2,
                        "description": "Condition 2"
                    }
                ],
                "outputs": {
                    "conditionAgentAgentflow": ""
                },
                "selected": false
            },
            "type": "agentFlow",
            "width": 285,
            "height": 100,
            "selected": false,
            "positionAbsolute": {
                "x": 418.848309770881,
                "y": -3.1161064094453508
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_6",
            "position": {
                "x": 791.1032552338371,
                "y": -60.94186783791825
            },
            "data": {
                "id": "customFunctionAgentflow_6",
                "label": "Final Data",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_6-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_6-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_6-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": [
                        {
                            "variableName": "incomingData",
                            "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_3\" data-label=\"customFunctionAgentflow_3\">{{ customFunctionAgentflow_3 }}</span> </p>"
                        }
                    ],
                    "customFunctionJavascriptFunction": "const incomingData = $incomingData; \n\nreturn incomingData;",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_6-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 138,
            "height": 67,
            "positionAbsolute": {
                "x": 791.1032552338371,
                "y": -60.94186783791825
            },
            "selected": false,
            "dragging": false
        },
        {
            "id": "loopAgentflow_1",
            "position": {
                "x": 792.0255789593962,
                "y": 17.067976920954095
            },
            "data": {
                "id": "loopAgentflow_1",
                "label": "Loop to Query generator",
                "version": 1,
                "name": "loopAgentflow",
                "type": "Loop",
                "color": "#FFA07A",
                "hideOutput": true,
                "baseClasses": ["Loop"],
                "category": "Agent Flows",
                "description": "Loop back to a previous node",
                "inputParams": [
                    {
                        "label": "Loop Back To",
                        "name": "loopBackToNode",
                        "type": "asyncOptions",
                        "loadMethod": "listPreviousNodes",
                        "freeSolo": true,
                        "id": "loopAgentflow_1-input-loopBackToNode-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Max Loop Count",
                        "name": "maxLoopCount",
                        "type": "number",
                        "default": 5,
                        "id": "loopAgentflow_1-input-maxLoopCount-number",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "loopBackToNode": "llmAgentflow_2-Query Generator",
                    "maxLoopCount": 5,
                    "undefined": ""
                },
                "outputAnchors": [],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 233,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": 792.0255789593962,
                "y": 17.067976920954095
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_7",
            "position": {
                "x": 807.4643238516239,
                "y": 103.00349663336985
            },
            "data": {
                "id": "customFunctionAgentflow_7",
                "label": "Handling no data",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_7-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_7-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_7-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": "",
                    "customFunctionJavascriptFunction": " return \"We are sorry, The data is not found on the database\";",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_7-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 183,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": 807.4643238516239,
                "y": 103.00349663336985
            },
            "dragging": false
        },
        {
            "id": "customFunctionAgentflow_8",
            "position": {
                "x": -363.7949597077524,
                "y": 176.75254533258862
            },
            "data": {
                "id": "customFunctionAgentflow_8",
                "label": "Handling the wrong Query",
                "version": 1,
                "name": "customFunctionAgentflow",
                "type": "CustomFunction",
                "color": "#E4B7FF",
                "baseClasses": ["CustomFunction"],
                "category": "Agent Flows",
                "description": "Execute custom function",
                "inputParams": [
                    {
                        "label": "Input Variables",
                        "name": "customFunctionInputVariables",
                        "description": "Input variables can be used in the function with prefix $. For example: $foo",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Variable Name",
                                "name": "variableName",
                                "type": "string"
                            },
                            {
                                "label": "Variable Value",
                                "name": "variableValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_8-input-customFunctionInputVariables-array",
                        "display": true
                    },
                    {
                        "label": "Javascript Function",
                        "name": "customFunctionJavascriptFunction",
                        "type": "code",
                        "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Variables with the prefix $. For example: $foo\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get global variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
                        "description": "The function to execute. Must return a string or an object that can be converted to a string.",
                        "id": "customFunctionAgentflow_8-input-customFunctionJavascriptFunction-code",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "customFunctionUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "customFunctionAgentflow_8-input-customFunctionUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "customFunctionInputVariables": "",
                    "customFunctionJavascriptFunction": " return \"We are sorry, please ask the right query\";",
                    "customFunctionUpdateState": "",
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "customFunctionAgentflow_8-output-customFunctionAgentflow",
                        "label": "Custom Function",
                        "name": "customFunctionAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 244,
            "height": 67,
            "selected": false,
            "positionAbsolute": {
                "x": -363.7949597077524,
                "y": 176.75254533258862
            },
            "dragging": false
        },
        {
            "id": "agentAgentflow_0",
            "position": {
                "x": 988.8490530038091,
                "y": -342.1906946185781
            },
            "data": {
                "id": "agentAgentflow_0",
                "label": "Agent 0 (1) (0)",
                "version": 1,
                "name": "agentAgentflow",
                "type": "Agent",
                "color": "#4DD0E1",
                "baseClasses": ["Agent"],
                "category": "Agent Flows",
                "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "agentModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "agentAgentflow_0-input-agentModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Messages",
                        "name": "agentMessages",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Role",
                                "name": "role",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "System",
                                        "name": "system"
                                    },
                                    {
                                        "label": "Assistant",
                                        "name": "assistant"
                                    },
                                    {
                                        "label": "Developer",
                                        "name": "developer"
                                    },
                                    {
                                        "label": "User",
                                        "name": "user"
                                    }
                                ]
                            },
                            {
                                "label": "Content",
                                "name": "content",
                                "type": "string",
                                "acceptVariable": true,
                                "generateInstruction": true,
                                "rows": 4
                            }
                        ],
                        "id": "agentAgentflow_0-input-agentMessages-array",
                        "display": true
                    },
                    {
                        "label": "Tools",
                        "name": "agentTools",
                        "type": "array",
                        "optional": true,
                        "array": [
                            {
                                "label": "Tool",
                                "name": "agentSelectedTool",
                                "type": "asyncOptions",
                                "loadMethod": "listTools",
                                "loadConfig": true
                            },
                            {
                                "label": "Require Human Input",
                                "name": "agentSelectedToolRequiresHumanInput",
                                "type": "boolean",
                                "optional": true
                            }
                        ],
                        "id": "agentAgentflow_0-input-agentTools-array",
                        "display": true
                    },
                    {
                        "label": "Knowledge (Document Stores)",
                        "name": "agentKnowledgeDocumentStores",
                        "type": "array",
                        "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
                        "array": [
                            {
                                "label": "Document Store",
                                "name": "documentStore",
                                "type": "asyncOptions",
                                "loadMethod": "listStores"
                            },
                            {
                                "label": "Describe Knowledge",
                                "name": "docStoreDescription",
                                "type": "string",
                                "generateDocStoreDescription": true,
                                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                                "rows": 4
                            },
                            {
                                "label": "Return Source Documents",
                                "name": "returnSourceDocuments",
                                "type": "boolean",
                                "optional": true
                            }
                        ],
                        "optional": true,
                        "id": "agentAgentflow_0-input-agentKnowledgeDocumentStores-array",
                        "display": true
                    },
                    {
                        "label": "Knowledge (Vector Embeddings)",
                        "name": "agentKnowledgeVSEmbeddings",
                        "type": "array",
                        "description": "Give your agent context about different document sources from existing vector stores and embeddings",
                        "array": [
                            {
                                "label": "Vector Store",
                                "name": "vectorStore",
                                "type": "asyncOptions",
                                "loadMethod": "listVectorStores",
                                "loadConfig": true
                            },
                            {
                                "label": "Embedding Model",
                                "name": "embeddingModel",
                                "type": "asyncOptions",
                                "loadMethod": "listEmbeddings",
                                "loadConfig": true
                            },
                            {
                                "label": "Knowledge Name",
                                "name": "knowledgeName",
                                "type": "string",
                                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
                            },
                            {
                                "label": "Describe Knowledge",
                                "name": "knowledgeDescription",
                                "type": "string",
                                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                                "rows": 4
                            },
                            {
                                "label": "Return Source Documents",
                                "name": "returnSourceDocuments",
                                "type": "boolean",
                                "optional": true
                            }
                        ],
                        "optional": true,
                        "id": "agentAgentflow_0-input-agentKnowledgeVSEmbeddings-array",
                        "display": true
                    },
                    {
                        "label": "Enable Memory",
                        "name": "agentEnableMemory",
                        "type": "boolean",
                        "description": "Enable memory for the conversation thread",
                        "default": true,
                        "optional": true,
                        "id": "agentAgentflow_0-input-agentEnableMemory-boolean",
                        "display": true
                    },
                    {
                        "label": "Memory Type",
                        "name": "agentMemoryType",
                        "type": "options",
                        "options": [
                            {
                                "label": "All Messages",
                                "name": "allMessages",
                                "description": "Retrieve all messages from the conversation"
                            },
                            {
                                "label": "Window Size",
                                "name": "windowSize",
                                "description": "Uses a fixed window size to surface the last N messages"
                            },
                            {
                                "label": "Conversation Summary",
                                "name": "conversationSummary",
                                "description": "Summarizes the whole conversation"
                            },
                            {
                                "label": "Conversation Summary Buffer",
                                "name": "conversationSummaryBuffer",
                                "description": "Summarize conversations once token limit is reached. Default to 2000"
                            }
                        ],
                        "optional": true,
                        "default": "allMessages",
                        "show": {
                            "agentEnableMemory": true
                        },
                        "id": "agentAgentflow_0-input-agentMemoryType-options",
                        "display": true
                    },
                    {
                        "label": "Window Size",
                        "name": "agentMemoryWindowSize",
                        "type": "number",
                        "default": "20",
                        "description": "Uses a fixed window size to surface the last N messages",
                        "show": {
                            "agentMemoryType": "windowSize"
                        },
                        "id": "agentAgentflow_0-input-agentMemoryWindowSize-number",
                        "display": false
                    },
                    {
                        "label": "Max Token Limit",
                        "name": "agentMemoryMaxTokenLimit",
                        "type": "number",
                        "default": "2000",
                        "description": "Summarize conversations once token limit is reached. Default to 2000",
                        "show": {
                            "agentMemoryType": "conversationSummaryBuffer"
                        },
                        "id": "agentAgentflow_0-input-agentMemoryMaxTokenLimit-number",
                        "display": false
                    },
                    {
                        "label": "Input Message",
                        "name": "agentUserMessage",
                        "type": "string",
                        "description": "Add an input message as user message at the end of the conversation",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "show": {
                            "agentEnableMemory": true
                        },
                        "id": "agentAgentflow_0-input-agentUserMessage-string",
                        "display": true
                    },
                    {
                        "label": "Return Response As",
                        "name": "agentReturnResponseAs",
                        "type": "options",
                        "options": [
                            {
                                "label": "User Message",
                                "name": "userMessage"
                            },
                            {
                                "label": "Assistant Message",
                                "name": "assistantMessage"
                            }
                        ],
                        "default": "userMessage",
                        "id": "agentAgentflow_0-input-agentReturnResponseAs-options",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "agentUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "agentAgentflow_0-input-agentUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "agentModel": "chatOpenAI",
                    "agentMessages": [
                        {
                            "role": "system",
                            "content": "<p>Strictly use E2B tools to visualise input in chart and tables.</p><p>Choose a chart type automatically based on the data.<br><br>Strictly no extra information just chart and tables.<br><br>data: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span></p><p></p><p></p>"
                        }
                    ],
                    "agentTools": [
                        {
                            "agentSelectedTool": "codeInterpreterE2B",
                            "agentSelectedToolRequiresHumanInput": "",
                            "agentSelectedToolConfig": {
                                "toolName": "code_interpreter",
                                "toolDesc": "Evaluates python code in a sandbox environment. The environment is long running and exists across multiple executions. You must send the whole script every time and print your outputs. Script should be pure python code that can be evaluated. It should be in python format NOT markdown. The code should NOT be wrapped in backticks. All python packages including requests, matplotlib, scipy, numpy, pandas, etc are available. Create and display chart using \"plt.show()\".",
                                "agentSelectedTool": "codeInterpreterE2B"
                            }
                        }
                    ],
                    "agentKnowledgeDocumentStores": "",
                    "agentKnowledgeVSEmbeddings": "",
                    "agentEnableMemory": true,
                    "agentMemoryType": "allMessages",
                    "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span> </p>",
                    "agentReturnResponseAs": "userMessage",
                    "agentUpdateState": "",
                    "agentModelConfig": {
                        "credential": "",
                        "modelName": "gpt-4o-mini",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxTokens": "",
                        "topP": "",
                        "frequencyPenalty": "",
                        "presencePenalty": "",
                        "timeout": "",
                        "strictToolCalling": "",
                        "stopSequence": "",
                        "basepath": "",
                        "proxyUrl": "",
                        "baseOptions": "",
                        "allowImageUploads": "",
                        "imageResolution": "low",
                        "reasoningEffort": "medium",
                        "agentModel": "chatOpenAI"
                    },
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "agentAgentflow_0-output-agentAgentflow",
                        "label": "Agent",
                        "name": "agentAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 176,
            "height": 101,
            "selected": false,
            "positionAbsolute": {
                "x": 988.8490530038091,
                "y": -342.1906946185781
            },
            "dragging": false
        },
        {
            "id": "toolAgentflow_0",
            "position": {
                "x": 1003.0550948863417,
                "y": -165.86036075218271
            },
            "data": {
                "id": "toolAgentflow_0",
                "label": "Tool 0",
                "version": 1.1,
                "name": "toolAgentflow",
                "type": "Tool",
                "color": "#d4a373",
                "baseClasses": ["Tool"],
                "category": "Agent Flows",
                "description": "Tools allow LLM to interact with external systems",
                "inputParams": [
                    {
                        "label": "Tool",
                        "name": "toolAgentflowSelectedTool",
                        "type": "asyncOptions",
                        "loadMethod": "listTools",
                        "loadConfig": true,
                        "id": "toolAgentflow_0-input-toolAgentflowSelectedTool-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Tool Input Arguments",
                        "name": "toolInputArgs",
                        "type": "array",
                        "acceptVariable": true,
                        "refresh": true,
                        "array": [
                            {
                                "label": "Input Argument Name",
                                "name": "inputArgName",
                                "type": "asyncOptions",
                                "loadMethod": "listToolInputArgs",
                                "refresh": true
                            },
                            {
                                "label": "Input Argument Value",
                                "name": "inputArgValue",
                                "type": "string",
                                "acceptVariable": true
                            }
                        ],
                        "show": {
                            "toolAgentflowSelectedTool": ".+"
                        },
                        "id": "toolAgentflow_0-input-toolInputArgs-array",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "toolUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "toolAgentflow_0-input-toolUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "toolAgentflowSelectedTool": "codeInterpreterE2B",
                    "toolInputArgs": [
                        {
                            "inputArgName": "input",
                            "inputArgValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span> </p>"
                        }
                    ],
                    "toolUpdateState": "",
                    "toolAgentflowSelectedToolConfig": {
                        "toolName": "code_interpreter",
                        "toolDesc": "Evaluates python code in a sandbox environment. The environment is long running and exists across multiple executions. You must send the whole script every time and print your outputs. Script should be pure python code that can be evaluated. It should be in python format NOT markdown. The code should NOT be wrapped in backticks. All python packages including requests, matplotlib, scipy, numpy, pandas, etc are available. Create and display chart using \"plt.show()\".",
                        "toolAgentflowSelectedTool": "codeInterpreterE2B"
                    },
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "toolAgentflow_0-output-toolAgentflow",
                        "label": "Tool",
                        "name": "toolAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 113,
            "height": 69,
            "selected": false,
            "positionAbsolute": {
                "x": 1003.0550948863417,
                "y": -165.86036075218271
            },
            "dragging": false
        },
        {
            "id": "agentAgentflow_1",
            "position": {
                "x": 1044.849053003809,
                "y": -88.1906946185781
            },
            "data": {
                "id": "agentAgentflow_1",
                "label": "Agent 0 (1) (0) (1)",
                "version": 1,
                "name": "agentAgentflow",
                "type": "Agent",
                "color": "#4DD0E1",
                "baseClasses": ["Agent"],
                "category": "Agent Flows",
                "description": "Dynamically choose and utilize tools during runtime, enabling multi-step reasoning",
                "inputParams": [
                    {
                        "label": "Model",
                        "name": "agentModel",
                        "type": "asyncOptions",
                        "loadMethod": "listModels",
                        "loadConfig": true,
                        "id": "agentAgentflow_1-input-agentModel-asyncOptions",
                        "display": true
                    },
                    {
                        "label": "Messages",
                        "name": "agentMessages",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Role",
                                "name": "role",
                                "type": "options",
                                "options": [
                                    {
                                        "label": "System",
                                        "name": "system"
                                    },
                                    {
                                        "label": "Assistant",
                                        "name": "assistant"
                                    },
                                    {
                                        "label": "Developer",
                                        "name": "developer"
                                    },
                                    {
                                        "label": "User",
                                        "name": "user"
                                    }
                                ]
                            },
                            {
                                "label": "Content",
                                "name": "content",
                                "type": "string",
                                "acceptVariable": true,
                                "generateInstruction": true,
                                "rows": 4
                            }
                        ],
                        "id": "agentAgentflow_1-input-agentMessages-array",
                        "display": true
                    },
                    {
                        "label": "Tools",
                        "name": "agentTools",
                        "type": "array",
                        "optional": true,
                        "array": [
                            {
                                "label": "Tool",
                                "name": "agentSelectedTool",
                                "type": "asyncOptions",
                                "loadMethod": "listTools",
                                "loadConfig": true
                            },
                            {
                                "label": "Require Human Input",
                                "name": "agentSelectedToolRequiresHumanInput",
                                "type": "boolean",
                                "optional": true
                            }
                        ],
                        "id": "agentAgentflow_1-input-agentTools-array",
                        "display": true
                    },
                    {
                        "label": "Knowledge (Document Stores)",
                        "name": "agentKnowledgeDocumentStores",
                        "type": "array",
                        "description": "Give your agent context about different document sources. Document stores must be upserted in advance.",
                        "array": [
                            {
                                "label": "Document Store",
                                "name": "documentStore",
                                "type": "asyncOptions",
                                "loadMethod": "listStores"
                            },
                            {
                                "label": "Describe Knowledge",
                                "name": "docStoreDescription",
                                "type": "string",
                                "generateDocStoreDescription": true,
                                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                                "rows": 4
                            },
                            {
                                "label": "Return Source Documents",
                                "name": "returnSourceDocuments",
                                "type": "boolean",
                                "optional": true
                            }
                        ],
                        "optional": true,
                        "id": "agentAgentflow_1-input-agentKnowledgeDocumentStores-array",
                        "display": true
                    },
                    {
                        "label": "Knowledge (Vector Embeddings)",
                        "name": "agentKnowledgeVSEmbeddings",
                        "type": "array",
                        "description": "Give your agent context about different document sources from existing vector stores and embeddings",
                        "array": [
                            {
                                "label": "Vector Store",
                                "name": "vectorStore",
                                "type": "asyncOptions",
                                "loadMethod": "listVectorStores",
                                "loadConfig": true
                            },
                            {
                                "label": "Embedding Model",
                                "name": "embeddingModel",
                                "type": "asyncOptions",
                                "loadMethod": "listEmbeddings",
                                "loadConfig": true
                            },
                            {
                                "label": "Knowledge Name",
                                "name": "knowledgeName",
                                "type": "string",
                                "placeholder": "A short name for the knowledge base, this is useful for the AI to know when and how to search for correct information"
                            },
                            {
                                "label": "Describe Knowledge",
                                "name": "knowledgeDescription",
                                "type": "string",
                                "placeholder": "Describe what the knowledge base is about, this is useful for the AI to know when and how to search for correct information",
                                "rows": 4
                            },
                            {
                                "label": "Return Source Documents",
                                "name": "returnSourceDocuments",
                                "type": "boolean",
                                "optional": true
                            }
                        ],
                        "optional": true,
                        "id": "agentAgentflow_1-input-agentKnowledgeVSEmbeddings-array",
                        "display": true
                    },
                    {
                        "label": "Enable Memory",
                        "name": "agentEnableMemory",
                        "type": "boolean",
                        "description": "Enable memory for the conversation thread",
                        "default": true,
                        "optional": true,
                        "id": "agentAgentflow_1-input-agentEnableMemory-boolean",
                        "display": true
                    },
                    {
                        "label": "Memory Type",
                        "name": "agentMemoryType",
                        "type": "options",
                        "options": [
                            {
                                "label": "All Messages",
                                "name": "allMessages",
                                "description": "Retrieve all messages from the conversation"
                            },
                            {
                                "label": "Window Size",
                                "name": "windowSize",
                                "description": "Uses a fixed window size to surface the last N messages"
                            },
                            {
                                "label": "Conversation Summary",
                                "name": "conversationSummary",
                                "description": "Summarizes the whole conversation"
                            },
                            {
                                "label": "Conversation Summary Buffer",
                                "name": "conversationSummaryBuffer",
                                "description": "Summarize conversations once token limit is reached. Default to 2000"
                            }
                        ],
                        "optional": true,
                        "default": "allMessages",
                        "show": {
                            "agentEnableMemory": true
                        },
                        "id": "agentAgentflow_1-input-agentMemoryType-options",
                        "display": true
                    },
                    {
                        "label": "Window Size",
                        "name": "agentMemoryWindowSize",
                        "type": "number",
                        "default": "20",
                        "description": "Uses a fixed window size to surface the last N messages",
                        "show": {
                            "agentMemoryType": "windowSize"
                        },
                        "id": "agentAgentflow_1-input-agentMemoryWindowSize-number",
                        "display": false
                    },
                    {
                        "label": "Max Token Limit",
                        "name": "agentMemoryMaxTokenLimit",
                        "type": "number",
                        "default": "2000",
                        "description": "Summarize conversations once token limit is reached. Default to 2000",
                        "show": {
                            "agentMemoryType": "conversationSummaryBuffer"
                        },
                        "id": "agentAgentflow_1-input-agentMemoryMaxTokenLimit-number",
                        "display": false
                    },
                    {
                        "label": "Input Message",
                        "name": "agentUserMessage",
                        "type": "string",
                        "description": "Add an input message as user message at the end of the conversation",
                        "rows": 4,
                        "optional": true,
                        "acceptVariable": true,
                        "show": {
                            "agentEnableMemory": true
                        },
                        "id": "agentAgentflow_1-input-agentUserMessage-string",
                        "display": true
                    },
                    {
                        "label": "Return Response As",
                        "name": "agentReturnResponseAs",
                        "type": "options",
                        "options": [
                            {
                                "label": "User Message",
                                "name": "userMessage"
                            },
                            {
                                "label": "Assistant Message",
                                "name": "assistantMessage"
                            }
                        ],
                        "default": "userMessage",
                        "id": "agentAgentflow_1-input-agentReturnResponseAs-options",
                        "display": true
                    },
                    {
                        "label": "Update Flow State",
                        "name": "agentUpdateState",
                        "description": "Update runtime state during the execution of the workflow",
                        "type": "array",
                        "optional": true,
                        "acceptVariable": true,
                        "array": [
                            {
                                "label": "Key",
                                "name": "key",
                                "type": "asyncOptions",
                                "loadMethod": "listRuntimeStateKeys",
                                "freeSolo": true
                            },
                            {
                                "label": "Value",
                                "name": "value",
                                "type": "string",
                                "acceptVariable": true,
                                "acceptNodeOutputAsVariable": true
                            }
                        ],
                        "id": "agentAgentflow_1-input-agentUpdateState-array",
                        "display": true
                    }
                ],
                "inputAnchors": [],
                "inputs": {
                    "agentModel": "chatOpenAI",
                    "agentMessages": [
                        {
                            "role": "system",
                            "content": "<p>Strictly use E2B tools to visualise input in chart and tables.</p><p>Choose a chart type automatically based on the data.<br><br>Strictly no extra information just chart and tables.<br><br>data: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span></p><p></p><p></p>"
                        }
                    ],
                    "agentTools": [
                        {
                            "agentSelectedTool": "codeInterpreterE2B",
                            "agentSelectedToolRequiresHumanInput": "",
                            "agentSelectedToolConfig": {
                                "toolName": "code_interpreter",
                                "toolDesc": "Evaluates python code in a sandbox environment. The environment is long running and exists across multiple executions. You must send the whole script every time and print your outputs. Script should be pure python code that can be evaluated. It should be in python format NOT markdown. The code should NOT be wrapped in backticks. All python packages including requests, matplotlib, scipy, numpy, pandas, etc are available. Create and display chart using \"plt.show()\".",
                                "agentSelectedTool": "codeInterpreterE2B"
                            }
                        }
                    ],
                    "agentKnowledgeDocumentStores": "",
                    "agentKnowledgeVSEmbeddings": "",
                    "agentEnableMemory": true,
                    "agentMemoryType": "allMessages",
                    "agentUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span> </p>",
                    "agentReturnResponseAs": "userMessage",
                    "agentUpdateState": "",
                    "agentModelConfig": {
                        "credential": "",
                        "modelName": "gpt-4o-mini",
                        "temperature": 0.9,
                        "streaming": true,
                        "maxTokens": "",
                        "topP": "",
                        "frequencyPenalty": "",
                        "presencePenalty": "",
                        "timeout": "",
                        "strictToolCalling": "",
                        "stopSequence": "",
                        "basepath": "",
                        "proxyUrl": "",
                        "baseOptions": "",
                        "allowImageUploads": "",
                        "imageResolution": "low",
                        "reasoningEffort": "medium",
                        "agentModel": "chatOpenAI"
                    },
                    "undefined": ""
                },
                "outputAnchors": [
                    {
                        "id": "agentAgentflow_1-output-agentAgentflow",
                        "label": "Agent",
                        "name": "agentAgentflow"
                    }
                ],
                "outputs": {},
                "selected": false
            },
            "type": "agentFlow",
            "width": 185,
            "height": 101,
            "selected": false,
            "positionAbsolute": {
                "x": 1044.849053003809,
                "y": -88.1906946185781
            },
            "dragging": false
        }
    ],
    "edges": [
        {
            "source": "customFunctionAgentflow_0",
            "sourceHandle": "customFunctionAgentflow_0-output-customFunctionAgentflow",
            "target": "llmAgentflow_0",
            "targetHandle": "llmAgentflow_0",
            "data": {
                "sourceColor": "#E4B7FF",
                "targetColor": "#64B5F6",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_0-customFunctionAgentflow_0-output-customFunctionAgentflow-llmAgentflow_0-llmAgentflow_0"
        },
        {
            "source": "startAgentflow_0",
            "sourceHandle": "startAgentflow_0-output-startAgentflow",
            "target": "llmAgentflow_1",
            "targetHandle": "llmAgentflow_1",
            "data": {
                "sourceColor": "#7EE787",
                "targetColor": "#64B5F6",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "startAgentflow_0-startAgentflow_0-output-startAgentflow-llmAgentflow_1-llmAgentflow_1"
        },
        {
            "source": "llmAgentflow_1",
            "sourceHandle": "llmAgentflow_1-output-llmAgentflow",
            "target": "conditionAgentflow_0",
            "targetHandle": "conditionAgentflow_0",
            "data": {
                "sourceColor": "#64B5F6",
                "targetColor": "#FFB938",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "llmAgentflow_1-llmAgentflow_1-output-llmAgentflow-conditionAgentflow_0-conditionAgentflow_0"
        },
        {
            "source": "conditionAgentflow_0",
            "sourceHandle": "conditionAgentflow_0-output-0",
            "target": "customFunctionAgentflow_0",
            "targetHandle": "customFunctionAgentflow_0",
            "data": {
                "sourceColor": "#FFB938",
                "targetColor": "#E4B7FF",
                "edgeLabel": "0",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentflow_0-conditionAgentflow_0-output-0-customFunctionAgentflow_0-customFunctionAgentflow_0"
        },
        {
            "source": "conditionAgentflow_0",
            "sourceHandle": "conditionAgentflow_0-output-1",
            "target": "customFunctionAgentflow_2",
            "targetHandle": "customFunctionAgentflow_2",
            "data": {
                "sourceColor": "#FFB938",
                "targetColor": "#E4B7FF",
                "edgeLabel": "1",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentflow_0-conditionAgentflow_0-output-1-customFunctionAgentflow_2-customFunctionAgentflow_2"
        },
        {
            "source": "customFunctionAgentflow_2",
            "sourceHandle": "customFunctionAgentflow_2-output-customFunctionAgentflow",
            "target": "llmAgentflow_2",
            "targetHandle": "llmAgentflow_2",
            "data": {
                "sourceColor": "#E4B7FF",
                "targetColor": "#64B5F6",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_2-customFunctionAgentflow_2-output-customFunctionAgentflow-llmAgentflow_2-llmAgentflow_2"
        },
        {
            "source": "llmAgentflow_0",
            "sourceHandle": "llmAgentflow_0-output-llmAgentflow",
            "target": "customFunctionAgentflow_1",
            "targetHandle": "customFunctionAgentflow_1",
            "data": {
                "sourceColor": "#64B5F6",
                "targetColor": "#E4B7FF",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "llmAgentflow_0-llmAgentflow_0-output-llmAgentflow-customFunctionAgentflow_1-customFunctionAgentflow_1"
        },
        {
            "source": "llmAgentflow_2",
            "sourceHandle": "llmAgentflow_2-output-llmAgentflow",
            "target": "customFunctionAgentflow_3",
            "targetHandle": "customFunctionAgentflow_3",
            "data": {
                "sourceColor": "#64B5F6",
                "targetColor": "#E4B7FF",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "llmAgentflow_2-llmAgentflow_2-output-llmAgentflow-customFunctionAgentflow_3-customFunctionAgentflow_3"
        },
        {
            "source": "customFunctionAgentflow_1",
            "sourceHandle": "customFunctionAgentflow_1-output-customFunctionAgentflow",
            "target": "conditionAgentAgentflow_0",
            "targetHandle": "conditionAgentAgentflow_0",
            "data": {
                "sourceColor": "#E4B7FF",
                "targetColor": "#ff8fab",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_1-customFunctionAgentflow_1-output-customFunctionAgentflow-conditionAgentAgentflow_0-conditionAgentAgentflow_0"
        },
        {
            "source": "conditionAgentAgentflow_0",
            "sourceHandle": "conditionAgentAgentflow_0-output-1",
            "target": "loopAgentflow_0",
            "targetHandle": "loopAgentflow_0",
            "data": {
                "sourceColor": "#ff8fab",
                "targetColor": "#FFA07A",
                "edgeLabel": "1",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-1-loopAgentflow_0-loopAgentflow_0"
        },
        {
            "source": "conditionAgentAgentflow_0",
            "sourceHandle": "conditionAgentAgentflow_0-output-0",
            "target": "customFunctionAgentflow_4",
            "targetHandle": "customFunctionAgentflow_4",
            "data": {
                "sourceColor": "#ff8fab",
                "targetColor": "#E4B7FF",
                "edgeLabel": "0",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-0-customFunctionAgentflow_4-customFunctionAgentflow_4"
        },
        {
            "source": "conditionAgentAgentflow_0",
            "sourceHandle": "conditionAgentAgentflow_0-output-2",
            "target": "customFunctionAgentflow_5",
            "targetHandle": "customFunctionAgentflow_5",
            "data": {
                "sourceColor": "#ff8fab",
                "targetColor": "#E4B7FF",
                "edgeLabel": "2",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-2-customFunctionAgentflow_5-customFunctionAgentflow_5"
        },
        {
            "source": "customFunctionAgentflow_3",
            "sourceHandle": "customFunctionAgentflow_3-output-customFunctionAgentflow",
            "target": "conditionAgentAgentflow_1",
            "targetHandle": "conditionAgentAgentflow_1",
            "data": {
                "sourceColor": "#E4B7FF",
                "targetColor": "#ff8fab",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_3-customFunctionAgentflow_3-output-customFunctionAgentflow-conditionAgentAgentflow_1-conditionAgentAgentflow_1"
        },
        {
            "source": "conditionAgentAgentflow_1",
            "sourceHandle": "conditionAgentAgentflow_1-output-0",
            "target": "customFunctionAgentflow_6",
            "targetHandle": "customFunctionAgentflow_6",
            "data": {
                "sourceColor": "#ff8fab",
                "targetColor": "#E4B7FF",
                "edgeLabel": "0",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-0-customFunctionAgentflow_6-customFunctionAgentflow_6"
        },
        {
            "source": "conditionAgentAgentflow_1",
            "sourceHandle": "conditionAgentAgentflow_1-output-1",
            "target": "loopAgentflow_1",
            "targetHandle": "loopAgentflow_1",
            "data": {
                "sourceColor": "#ff8fab",
                "targetColor": "#FFA07A",
                "edgeLabel": "1",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-1-loopAgentflow_1-loopAgentflow_1"
        },
        {
            "source": "conditionAgentAgentflow_1",
            "sourceHandle": "conditionAgentAgentflow_1-output-2",
            "target": "customFunctionAgentflow_7",
            "targetHandle": "customFunctionAgentflow_7",
            "data": {
                "sourceColor": "#ff8fab",
                "targetColor": "#E4B7FF",
                "edgeLabel": "2",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-2-customFunctionAgentflow_7-customFunctionAgentflow_7"
        },
        {
            "source": "conditionAgentflow_0",
            "sourceHandle": "conditionAgentflow_0-output-2",
            "target": "customFunctionAgentflow_8",
            "targetHandle": "customFunctionAgentflow_8",
            "data": {
                "sourceColor": "#FFB938",
                "targetColor": "#E4B7FF",
                "edgeLabel": "2",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "conditionAgentflow_0-conditionAgentflow_0-output-2-customFunctionAgentflow_8-customFunctionAgentflow_8"
        },
        {
            "source": "customFunctionAgentflow_5",
            "sourceHandle": "customFunctionAgentflow_5-output-customFunctionAgentflow",
            "target": "toolAgentflow_0",
            "targetHandle": "toolAgentflow_0",
            "data": {
                "sourceColor": "#E4B7FF",
                "targetColor": "#d4a373",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_5-customFunctionAgentflow_5-output-customFunctionAgentflow-toolAgentflow_0-toolAgentflow_0"
        },
        {
            "source": "customFunctionAgentflow_4",
            "sourceHandle": "customFunctionAgentflow_4-output-customFunctionAgentflow",
            "target": "agentAgentflow_0",
            "targetHandle": "agentAgentflow_0",
            "data": {
                "sourceColor": "#E4B7FF",
                "targetColor": "#4DD0E1",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_4-customFunctionAgentflow_4-output-customFunctionAgentflow-agentAgentflow_0-agentAgentflow_0"
        },
        {
            "source": "customFunctionAgentflow_6",
            "sourceHandle": "customFunctionAgentflow_6-output-customFunctionAgentflow",
            "target": "agentAgentflow_1",
            "targetHandle": "agentAgentflow_1",
            "data": {
                "sourceColor": "#3949ab",
                "targetColor": "#3949ab",
                "isHumanInput": false
            },
            "type": "agentFlow",
            "id": "customFunctionAgentflow_6-customFunctionAgentflow_6-output-customFunctionAgentflow-agentAgentflow_1-agentAgentflow_1"
        }
    ]
}
